#!/usr/bin/env python
#AUTHUR: ZHIQIANG TANG
#DATE: 2019/04/20
import minimalmodbus
import binascii
import time

class Robotiq_py2:
	
	def gripperTest(self):
		### command definition
		self.initGripper_str = '000000000000'
		#                 aabbcc. aa:position, bb:speed, cc:torque 
		self.close_str = '090000ff0fff'
		open_str = '090000000fff'

		### open serial port and setup baudrate
		instrument = minimalmodbus.Instrument('/dev/ttyUSB0', 9) # port name, slave address (in decimal)
		instrument.serial.baudrate = 115200

		### init robotiq
		print("init...")
		time.sleep(1)
		return_str = instrument.write_string(1000, binascii.unhexlify(self.initGripper_str), numberOfRegisters=3)
		print(return_str)
		time.sleep(3)
		print("init done!")

		### read robotiq 
		#         registeraddress 0x07d0==2000     numberOfRegisters    functioncode
		return_str = instrument.read_string(2000, numberOfRegisters=3, functioncode=3)
		# print it in help
		print ("robotiq status:"+" ".join(hex(ord(n)) for n in return_str))

		# wirte robotiq
		for i in range(3):
			#close:
			print("clse:")
								#address of 1st register:0x03e8 = 1000
			return_str = instrument.write_string(1000, binascii.unhexlify(self.close_str), numberOfRegisters=3)
			time.sleep(3)
			#open:
			print("open")
			return_str = instrument.write_string(1000, binascii.unhexlify(open_str), numberOfRegisters=3)	
			time.sleep(3)
			### read robotiq 
			#         registeraddress 0x07d0==2000     numberOfRegisters    functioncode
			return_str = instrument.read_string(2000, numberOfRegisters=3, functioncode=3)
			# print it in hex
			print ("robotiq status:"+" ".join(hex(ord(n)) for n in return_str))

def testpy3(): 
	print ("test start py3")
	r = Robotiq_py2()
	r.gripperTest()
	
if __name__ == '__main__':
	print ("test start")
	r = Robotiq_py2()
	r.gripperTest()




